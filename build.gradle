// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "version_config.gradle"
apply from: "version.gradle"
apply from: "gradletest.gradle"
apply from: "gradle_knowledge.gradle"








buildscript {

    repositories {

        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        google()

        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }


    }
    dependencies {
        classpath Libs.agp
        classpath Libs.kgp

//        classpath(rootProject.extra["androidPlugin"].toString())
//        classpath(rootProject.extra["kotlinPlugin"].toString())

        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5"


        //https://github.com/iwhys/sdk-editor-plugin
        classpath 'com.github.iwhys:sdk-editor-plugin:1.1.7'


//        classpath 'io.michaelrocks:paranoid-gradle-plugin:0.3.7'


        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8' // 添加这行
        //定义在这里，这样每个module都可以使用
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        // 配置自动上传符号表插件，注：为了能快速并准确地定位用户APP发生Crash的代码位置，Bugly使用符号表对APP发生Crash的程序堆栈进行解析和还原

//        classpath 'io.github.trycatchx:rocketx:1.0.1'

        classpath fileTree(dir: './Plugin', include: ['*.jar'])


        classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.2.21'



    }

//    给所有的子工程统一配置
    subprojects {
        project.configurations.all {
            resolutionStrategy.eachDependency { details ->
                def requested = details.requested
//                println "group: ${requested.group}, name:${requested.name}, version:${details.useVersion}"
                if (requested.group == 'androidx.core'
                        && !requested.name.contains('androidx') ) {
                    details.useVersion "1.3.0"
                }

            }
        }
    }
}


//所有module全局生效
allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }

        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }



        flatDir {
            dirs 'libs'
            dirs project(':app').file('libs')
            dirs project(':fastFramework').file('libs')
        }
    }
    configurations.all {
        resolutionStrategy.force "androidx.localbroadcastmanager:localbroadcastmanager:1.0.0"

    }



    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}


String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir');
}


/**
 * 获取apk
 */
task archiveOutApks(type: Copy) {
    from('app/build/outputs/apk')
    exclude '*unaligned*'
    into('./outapk/archives')
}

println ("buildDir:${rootProject.buildDir}, name:${rootProject.name}")
task clean(type: Delete) {
    println "aaa"
    delete rootProject.buildDir
    delete 'outapk/archives'
    println "bbb"

    doFirst {
        println "删除前2"
    }

    doFirst {
        println "删除前"
    }
    doLast {
        println "删除成功"
    }

    doLast {
        println "删除成功2"
    }
}



task bumpVersion(){
    doFirst {
        def versionPropsFile = file("version.properties")
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def codeBumped = versionProps["VERSION_CODE"].toInteger()+1
        versionProps["VERSION_CODE"] = codeBumped.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

task bumpVersionAndNotify(dependsOn: bumpVersion){
    doLast {
       println "升级完成"
    }
}




//Finaby

afterEvaluate {
    println "正式执行task 之前(第2阶段和第三阶段之间)  ->"

//    android.applicationVariants.all{variant ->
//        def capitalized = variant.name.capitalize()
//        println "capitalized: ${capitalized}"
//    }
}



task loadProject{
    getChildProjects().each {
        println "${it.key}:${it.value}"
    }
}



