// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "version_config.gradle"
apply from: "gradletest.gradle"

buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        google()
        repositories {
            google()
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            maven { url 'https://jitpack.io' }
            jcenter()
        }

    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"



        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8' // 添加这行
        //定义在这里，这样每个module都可以使用
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        // 配置自动上传符号表插件，注：为了能快速并准确地定位用户APP发生Crash的代码位置，Bugly使用符号表对APP发生Crash的程序堆栈进行解析和还原
    }

    subprojects {
        project.configurations.all {
            resolutionStrategy.eachDependency { details ->

                if (details.requested.group == 'androidx.core'
                        && !details.requested.name.contains('androidx') ) {
                    details.useVersion "1.3.0"
                }
                /*if (details.requested.group == 'androidx.lifecycle') {
                    details.useVersion "2.0.0"
                }
                if (details.requested.group == 'androidx.versionedparcelable') {
                    details.useVersion "1.0.0"
                }
                if (details.requested.group == 'androidx.fragment') {
                    details.useVersion "1.0.0"
                }
                if (details.requested.group == 'androidx.appcompat') {
                    details.useVersion "1.0.1"
                }*/
            }
        }
    }
}


allprojects {
    repositories {
        google()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        maven { url "https://jitpack.io" }
    }
    configurations.all {
        resolutionStrategy.force "androidx.localbroadcastmanager:localbroadcastmanager:1.0.0"

    }



    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}


String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir');
}


/**
 * 获取apk
 */
task archiveOutApks(type: Copy) {
    from('app/build/outputs/apk')
    exclude '*unaligned*'
    into('./outapk/archives')
}

println ("buildDir:${rootProject.buildDir}, name:${rootProject.name}")
task clean(type: Delete) {
    println "aaa"
    delete rootProject.buildDir
    delete 'outapk/archives'
    println "bbb"

    doFirst {
        println "删除前2"
    }

    doFirst {
        println "删除前"
    }
    doLast {
        println "删除成功"
    }

    doLast {
        println "删除成功2"
    }
}



task bumpVersion(){
    doFirst {
        def versionPropsFile = file("version.properties")
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def codeBumped = versionProps["VERSION_CODE"].toInteger()+1
        versionProps["VERSION_CODE"] = codeBumped.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

task bumpVersionAndNotify(dependsOn: bumpVersion){
    doLast {
       println "升级完成"
    }
}

task task1(){
    doLast {
        println "task1 doLast"
    }
}

task task2(dependsOn: task1){
    doLast {
        println "task2 doLast"
    }
}

afterEvaluate {
    println "正式执行task 之前(第2阶段和第三阶段之间)  ->"
}