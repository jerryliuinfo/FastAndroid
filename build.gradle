// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "version_config.gradle"
apply from: "version.gradle"
apply from: "gradletest.gradle"
apply from: "gradle_knowledge.gradle"


buildscript {

    ext {
//        kotlin_version = '1.8.20-Beta'
    }
    repositories {

//        unsplash.dogedoge.com
//        dribble.dogedoge.com

        maven { url 'unsplash.dogedoge.com' }
        maven { url 'dribble.dogedoge.com' }

        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        google()
          maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven{url "https://oss.sonatype.org/content/repositories/snapshots"}



    }
    dependencies {

        classpath PluginConfig.agp
        classpath PluginConfig.kgp
        classpath PluginConfig.andResGuard
        classpath PluginConfig.hilt

        classpath PluginConfig.maven_gradle_plugin
        classpath PluginConfig.navigation
        classpath PluginConfig.pablo
        classpath PluginConfig.paranoid

//        classpath PluginConfig.kotlin_serialization


        //https://github.com/iwhys/sdk-editor-plugin
        classpath 'com.github.iwhys:sdk-editor-plugin:1.1.7'


        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8' // 添加这行


        classpath fileTree(dir: './Plugin', include: ['*.jar'])


        classpath PluginConfig.mcImage

        classpath PluginConfig.ruler

//        classpath PluginConfig.booster
        //crash 处理
//        classpath "com.didiglobal.booster:booster-transform-activity-thread:${Versions.booster}"





    }

//    给所有的子工程统一配置
    subprojects {
        project.configurations.all {
            resolutionStrategy.eachDependency { details ->
                def requested = details.requested
//                println "group: ${requested.group}, name:${requested.name}, version:${details.useVersion}"
                if (requested.group == 'androidx.core'
                        && !requested.name.contains('androidx') ) {
                    details.useVersion "1.6.0"
                }

                if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect') {
                    details.useVersion "1.6.10"
                }
                // 
                if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib') {
                    details.useVersion "1.6.0"
                }
//                if (requested.group == 'androidx.lifecycle') {
//                    details.useVersion "2.4.1"
//                }



                if (requested.group == 'androidx.appcompat' && requested.name == 'appcompat') {
                    details.useVersion Versions.appCompat
                }

                if (requested.group == "androidx") {
                    if (!requested.name.startsWith("multidex")) {
                        details.useVersion "${targetSdk}.+"
                    }
                }
            }
        }
    }
}


//所有module全局生效
allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven{url "https://oss.sonatype.org/content/repositories/snapshots"}

    }
    configurations.all {
        resolutionStrategy.force "androidx.localbroadcastmanager:localbroadcastmanager:1.0.0"

    }



    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}


String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir');
}


/**
 * 获取apk
 */
task archiveOutApks(type: Copy) {
    from('app/build/outputs/apk')
    exclude '*unaligned*'
    into('./outapk/archives')
}

println ("buildDir:${rootProject.buildDir}, name:${rootProject.name}")
task clean(type: Delete) {
    println "aaa"
    delete rootProject.buildDir
    delete 'outapk/archives'
    println "bbb"

    doFirst {
        println "删除前2"
    }

    doFirst {
        println "删除前"
    }
    doLast {
        println "删除成功"
    }

    doLast {
        println "删除成功2"
    }
}



task bumpVersion(){
    doFirst {
        def versionPropsFile = file("version.properties")
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def codeBumped = versionProps["VERSION_CODE"].toInteger()+1
        versionProps["VERSION_CODE"] = codeBumped.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

task bumpVersionAndNotify(dependsOn: bumpVersion){
    doLast {
       println "升级完成"
    }
}




//Finaby

afterEvaluate {
    println "正式执行task 之前(第2阶段和第三阶段之间)  ->"

//    android.applicationVariants.all{variant ->
//        def capitalized = variant.name.capitalize()
//        println "capitalized: ${capitalized}"
//    }
}



task loadProject{
    getChildProjects().each {
        println "${it.key}:${it.value}"
    }
}



