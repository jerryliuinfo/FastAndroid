def config = rootProject.ext
/*if (isTopicRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}*/
//apply from: rootProject.file('cc-settings-2.gradle')

apply plugin: 'com.android.library'
android {
    compileSdkVersion rootProject.androidConfigs.compileSdkVersion
    buildToolsVersion rootProject.androidConfigs.buildToolsVersion
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        if (isTopicRunAlone.toBoolean()){
            applicationId "com.apache.fastandroid.topic"
            //dex突破65535的限制
            multiDexEnabled true
        }
        minSdkVersion rootProject.androidConfigs.minSdkVersion
        targetSdkVersion rootProject.androidConfigs.targetSdkVersion
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 替换Manifest里${PROVIDER_B}占位符
            manifestPlaceholders = [PROVIDER_TOPIC: 'PROVIDER_TOPIC']
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [PROVIDER_TOPIC: 'PROVIDER_TOPIC_DEBUG']
        }
    }

    resourcePrefix "topic_"

    sourceSets {
        main {
            if (isTopicRunAlone.toBoolean()) {
                manifest.srcFile 'src/main/runalone/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/runalone/java']
                res.srcDirs = ['src/main/res', 'src/main/runalone/res']
                assets.srcDirs = ['src/main/assets', 'src/main/runalone/assets']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude '**/runalone/**'
                }
            }
        }
    }


    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation config.androidLib.multidex
    implementation project(':baselib')
    implementation project(':fastFramework')

    implementation rootProject.androidLib.core_ktx

    implementation rootProject.androidLib.constraintLayout

    implementation rootProject.androidLib.design
    implementation rootProject.androidLib.appcompatV7
    implementation rootProject.androidLib.cardview
    implementation rootProject.thirdLib.fastjson
    implementation rootProject.thirdLib.gson
    implementation rootProject.thirdLib.okhttp3
    implementation rootProject.thirdLib.material_dialogs
    implementation rootProject.thirdLib.glide
    implementation rootProject.thirdLib.picasso
    implementation rootProject.thirdLib.imageLoader
    implementation rootProject.thirdLib.okhttp3_log_interceptor


    //retrofit
    implementation rootProject.thirdLib.retrofit
    implementation rootProject.thirdLib.retrofit_converter_gson
    implementation rootProject.thirdLib.retrofit_adapter_rxjava
    implementation rootProject.thirdLib.retrofit_converter_scalars

    //rxjava&rxandroid
    implementation rootProject.thirdLib.rxjava
    implementation rootProject.thirdLib.rxandroid






    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')


}
