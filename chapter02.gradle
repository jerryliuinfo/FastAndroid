//List
task printList{
    def numList = [1,2,3,4,5,6]
    println numList.getClass().getName()

    println numList[1]
    println numList[-1]
    println numList[-2]
    println numList[1..3]
}

//Map
task printMap{
    def map = ['width': 1024, 'height': 768]
    println map.getClass().name

    println "width:${map['width']}, height:${map.height}"

    map.each {
        println "width222:${it.key}, height222:${it.value}"

    }
}

//2.3.1  方法 参数是 可以省略 ()


task invokeMethod(){
    method(1,2)
    method 1,2
}

def method(int a, int b){
    println a + b
}

//2.3.2  return  是可以不写的（Groovy会把方法执行的最后一句代码作为返回值）
task printMethodReturn{
   def add1 = method2 1,2
   def add2 = method2 4,2
    println "add1:${add1}, add2:${add2}"

}

def method2(int a, int b){
    Math.max(a,b)
}

//2.3.3  代码块是可以作为参数传递的







//2.4 JaveBean

class Person{
    private String name
    public int getAge(){
        12
    }
}

task helloJavaBean{
    Person p = new Person()
    println "名字是: ${p.name}"
    p.name = "张三"
    println "名字是: ${p.name}"
    println "年龄是: ${p.age}"

}


//2.5 闭包

//2.5.1 初始闭包
task helloClosure{
    customEach{
        println it
    }
}

def customEach(closure){
    for (int i in 1..10){
        closure(i)
    }
}

//2.5.2 向闭包传递参数

task helloClosure2{
    eachMap{ key,value ->
        println "helloClosure2: ${key} is ${value}"
    }
}

def eachMap(closure){
    def map = ["name": "zhangsan", "age": 18]
    map.each {
        closure it.key,it.value
    }
}

//2.5.3 闭包委托

task helloDelegate{
    new Delegate().test {
        println "thisObject:${thisObject.getClass()}"
        println "owner:${owner.getClass()}"
        println "delegate:${delegate.getClass()}"
        method3()
        it.method3()
    }
}

def method3(){
    println "Context this:${this.getClass()} in root"
    println "method3 in root"
}

class Delegate{
    def method3(){
        println "Delegate this:${this.getClass()} in Delegate"
        println "method3 in Delegate"
    }

    def test(Closure<Delegate> closure){
        closure(this)
    }


}




task configClosure{
    person {
        personName = "zhangsan"
        personAge = 20
        dumpPerson()
    }
}

class Person2{
    String personName
    int personAge

    def dumpPerson(){
        println "name is ${personName}, age is ${personAge}"
    }
}

def person(Closure<Person> closure){
    Person2 p = new Person2()
    closure.delegate = p
    closure.setResolveStrategy(Closure.DELEGATE_FIRST)
    closure(p)
}