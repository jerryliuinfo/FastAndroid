apply plugin: 'com.android.application'
//com.hc.gradle为resources/META-INF/gradle-plugins
//下的properties文件名称
//apply plugin: 'com.rocketx'



//apply plugin: 'largeimage-monitor'

ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译


apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//apply plugin 的名称为 /buildSrc/src/main/resources/META-INF/gradle-plugins目录下的 xx.properties 的名称
//apply plugin: 'com.myplugin'

/**
 * 这里 myPlugin 为 com.fastandroid.plugin.MyPlugin.java 这个类中 通过 target.extensions.create("myPlugin",ExtensionBean)
 * 中创建的名称
 * name 和 value 属性为 ExtensionBean中定义的属性
 */
//myPlugin{
//    name "This is myPlugin name"
//    value "This is myPlugin value "
//}

apply plugin: MyFirstPlugin
artemis{
    name = "jerry"
    age = 18
}

class MyFirstPlugin implements Plugin<Project>{

    @Override
    void apply(Project project) {
        println 'My First Plugin -->'
        MyFirstPluginBean pluginBean = project.extensions.create("artemis",MyFirstPluginBean.class)
        project.afterEvaluate {
            println "name:${pluginBean.name}, age:${pluginBean.age}"
        }
    }
}

class MyFirstPluginBean{
    public String name = 'defaultName'
    public int age = 0
}


Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}
def getAppVersionName(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    println "getAppVersionName:${stdout.toString()}"
    return stdout.toString()
}

def getAppVersionCode(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--list'
        standardOutput = stdout
    }
    println "getAppVersionName:${stdout.toString()}"
    return stdout.toString().split('\n').size()
}

android {
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion

        versionCode rootProject.appVersionCode
        versionCode getAppVersionCode()
        versionName rootProject.appVersionName
//        versionName getAppVersionName()

        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        //5.0以下将svg图片生成指定维度的图片
        vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        flavorDimensions "env", "paying"
//        flavorDimensions "env"

        /**
         * 配置哪些类型的资源才被打包到apk 中，例如配置为 'zh-rCN'，则只有 中文的资源才会被打包到apk中，
         * 这样我们引用的第三方库，特别是 support library 和 google play services 这两个主要的大库，
         * 因为国际化的问题，他们都支持了几十种语言，但是对于我们的app 来说只需要中文的语言就可以了
         */
        resConfigs('zh-rCN','hdpi')

        resValue "string", "appDisplayName", ""


        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }
        defaultConfig {
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a', 'x86'
            }
        }

        /**
         * defaultConfig 下的consumerProguardFiles 配置的*.pro文件将会在library
         module打包成aar时，以proguard.txt的形式存在，将参与到集成这个arr的App编译中，但不参与这个library
         module打包成aar的编译过程；
         ————————————————
         */
        consumerProguardFiles "consumer-rules.pro"
    }

    productFlavors {
        dev {
            dimension "env"
            manifestPlaceholders = [UMENG_CHANNEL: "dev"]
            resValue "string", "appDisplayName", "FastDev"
            buildConfigField 'String', 'WEB_URL', '"http://www.dev.com"'
            resValue 'string', 'channel_tips', 'dev渠道欢迎你'
        }

        prod {
            dimension "env"
            manifestPlaceholders = [UMENG_CHANNEL: "prod"]
            resValue "string", "appDisplayName", "FastProd"
            buildConfigField 'String', 'WEB_URL', '"http://www.prod.com"'
            /**
             * 将会在 app/build/generated/res/resValues/prodPay/debug/values/gradleResValues.xml
             * 中生成 channel_tips 字符串
             */
            resValue 'string', 'channel_tips', 'prod渠道欢迎你'
        }

         pay {
             dimension "paying"

         }

         free {
             dimension "paying"

         }

    }




    signingConfigs {


        release {
            storePassword properties.getProperty('KEYSTORE_PASSWORD')
            storeFile file(properties.getProperty('KEYSTORE_FILE'))
            keyAlias properties.getProperty('KEYSTORE_ALIAS')
            keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
        }


        debug {
            storePassword properties.getProperty('KEYSTORE_PASSWORD')
            storeFile file(properties.getProperty('KEYSTORE_FILE'))
            keyAlias properties.getProperty('KEYSTORE_ALIAS')
            keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
        }
    }

    buildTypes {

        release {
            debuggable true    //默认false，可不写
            minifyEnabled = true
            /**
             * 去除无用的资源
             * 开启了这个开关之后，在构建日志中会看到执行 transformClassesWithShrinkResForRelease
             */
            shrinkResources true
            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            /**
             * 获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
             * 安装目录下的tools/prlguard
             */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean', 'LOG_DEBUG', "false")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
            //必须要现在上面配置 signingConfigs 信息，否则会报错
            signingConfig signingConfigs.release
        }
        debug {
            debuggable = true
            applicationIdSuffix ".debug"
            debuggable true    //默认false，可不写
            minifyEnabled = false
            manifestPlaceholders = [appName: "FastAnd测试版"]
            buildConfigField('boolean', 'LOG_DEBUG', "true")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")

            signingConfig signingConfigs.release


        }
    }



    sourceSets {
//        pay {
//            res.srcDirs = ['src/pay/res']
//        }
//        free {
//            res.srcDirs = ['src/free/res']
//        }
    }

    adbOptions{
        timeOutInMs = 5000
        //用来设置 adb install 安装这个操作的设置项的
        /**
         * -r: replace existing application
         * -t: allow test packages
         * -s: install application on sdcard
         * -d: allow version code downgrade
         * -g: grant all runtime permissions
         */
        installOptions '-r','-s'
    }




    resourcePrefix ""
    //修改apk 名称
    applicationVariants.all { variant ->
        //这里的flavor 是单一维度的，例如 devPay， 返回的是两个 ， 一个是 dev 一个是pay
//        variant.productFlavors.each{ flavor ->
//            println "applicationVariants flavor:${flavor.name}"
//        }
        //outputs 属性是一个list集合，遍历找到以 .apk 结尾，说明是 apk文件
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')){

                def versionName = variant.versionName
                def buildType = variant.buildType.name
                def flavorName = variant.flavorName
                //flavorName:prodPay   fileName:app-prod-pay-debug.apk
//                println "flavorName: ${flavorName}, fileName:${output.outputFile.name}"
                output.outputFileName = "${"FastAndroid"}_${flavorName}_${versionName}_${buildType}.apk"
            }
        }
    }





    buildFeatures{
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility rootProject.sourceCompatibilityVersion
        targetCompatibility rootProject.targetCompatibilityVersion
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }


    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/*.kotlin_module'

    }


    useLibrary 'org.apache.http.legacy'

    lintOptions {
        /**
         * https://blog.csdn.net/u010230055/article/details/80742626  去掉 app:lintVitalRelease 这个任务，这个任务很耗时，
         * 设置 checkReleaseBuilds false 就不会执行这个任务了
         */
        checkReleaseBuilds false
        abortOnError false
        //检查是否使用了最新api
//        check 'NewApi'
    }


    //将SO库打包到apk内
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    //AspectJ 报错 参考:https://blog.csdn.net/zhangshuny/article/details/106056790,
    // https://blog.csdn.net/tian2342/article/details/102698564
//    aspectjx{
//        exclude 'androidx','com.google','com.google.firebase','com.google.android','com.android'
//    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
        preDexLibraries = true
        //配置执行 dx 命令时为其分配的最大堆内存，主要用来解决 dx 时内存不够用的情况
        javaMaxHeapSize "4g"

    }

}

kotlin {
    experimental {
        coroutines 'enable'
    }
}
//androidExtensions {
//    experimental = true
//}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.doFirst {
            println("=====================assembleDebug doFirst=========================")
        }
    }
}

afterEvaluate {
    println "afterEvaluate  -->"
    android.applicationVariants.all { variant ->
        def capitalized = variant.name.capitalize()
        //ProdPayDebug、ProdFreeDebug、DevPayDebug、DevFreeDebug
        if (capitalized == "ProdPayDebug"){
            def build = new StringBuilder()
            build.append("name:${variant.name}\n")
            build.append("description:${variant.description}\n")
            build.append("dirName:${variant.dirName}\n")
//            build.append("base:${variant.baseName}\\n")
            build.append("flavorName:${variant.flavorName}\\n")
            build.append("mergedFlavor:${variant.mergedFlavor}\\n")
            build.append("ProductFlavors:${variant.productFlavors}\\n")
//            build.append("SourceSets:${variant.sourceSets},")
//            build.append("SourceFolders:${variant.getSourceFolders(SourceKind.JAVA)},")
            build.append("getMappingFile:${variant.mappingFile}\\n")
            build.append("buildType:${variant.buildType}\\n")

            println build.toString()
            //让 customTask 在 assembleXX 之后执行
            tasks.named("assemble$capitalized").get().finalizedBy "customTask"
        }

    }
}

task customTask{
    doLast{
        println "customTask doLast  -->"
    }
}

dependencies {
    api fileTree(include: ['*.jar',"*.aar"], dir: 'libs')

    println("isTopicRunAlone:${isTopicRunAlone}")


    implementation rootProject.ext.dependencies2.publicImplementation
    implementation rootProject.ext.androidLib.multidex


    implementation rootProject.ext.thirdLib.superTextView
    implementation rootProject.ext.thirdLib.banner
    implementation rootProject.ext.thirdLib.agentweb
    implementation rootProject.ext.thirdLib.picasso
    implementation rootProject.ext.thirdLib.imageLoader
    implementation rootProject.ext.thirdLib.jsbridge

    implementation rootProject.ext.thirdLib.loadSir

    implementation rootProject.ext.thirdLib.reactivexRxjava2
    implementation rootProject.ext.thirdLib.reactivexRxandroid


//    implementation rootProject.ext.androidLib.androidx_workmanager
    implementation ('androidx.work:work-runtime:2.2.0'){
        exclude group: 'androidx.arch.core'
    }
    implementation rootProject.ext.thirdLib.blockcanary
    implementation rootProject.ext.thirdLib.leakcanary


    implementation rootProject.ext.thirdLib.retrofit
    implementation rootProject.ext.thirdLib.retrofitConverterGson
    implementation rootProject.ext.thirdLib.retrofitConverterScalars
    implementation rootProject.ext.thirdLib.retrofitAdapterRx

    implementation rootProject.ext.thirdLib.permissionx
    implementation rootProject.ext.thirdLib.viewpump

    debugImplementation rootProject.ext.thirdLib.blockcanary
    debugImplementation rootProject.ext.thirdLib.AppStartFaster

    debugImplementation rootProject.ext.thirdLib.XUI
    debugImplementation rootProject.ext.thirdLib.XUI

    implementation rootProject.ext.thirdLib.lottie
    //日志
//    implementation rootProject.ext.thirdLib.logger




    rootProject.ext.dependencies.basic.each{
        implementation project(it)
    }
    implementation project(":libnetwork")
    implementation project(':hencode_basic')
    implementation project(':hencoder_paint')
    implementation project(':hencoder_drawtext')
    implementation project(':hencoder_plus')
    implementation project(':hencoder_clipmatrix')
//    implementation project(':easypay')


    //必须加行这行，否则proxyToolProcessor无法自动生成类
    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"


}



sourceSets.all{
    ext.resourceDir = null
}

sourceSets{
    main{
        resourceDir = "main/res"
    }
    test{
        resourceDir = "test/res"
    }
}


task ex37CustomProperty{
    doLast {
        println "年龄是: ${age}, 电话是:${phone}, 名字是:${name}"
    }


    sourceSets.each {
        println "${it.name} 的 resourceDir 是: ${it.resourceDir}"
    }
}




//4.3 任务分组和描述
def org.gradle.api.Task myTask = task 'ex43GroupTask'
myTask.group = BasePlugin.BUILD_GROUP
myTask.description = "这是一个构建的引导任务"
myTask.doLast {
    println "group:${group}, desc:${description}"
}



//test