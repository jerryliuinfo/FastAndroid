apply plugin: 'com.android.application'
//com.hc.gradle为resources/META-INF/gradle-plugins
//下的properties文件名称

ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译
//apply plugin: 'android-aspectjx'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}


android {

    compileSdkVersion rootProject.androidConfigs.compileSdkVersion
    buildToolsVersion rootProject.androidConfigs.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.androidConfigs.minSdkVersion
        targetSdkVersion rootProject.androidConfigs.targetSdkVersion
        versionCode 100
        versionName "V1.0.0"

        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        //5.0以下将svg图片生成指定维度的图片
        vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        flavorDimensions "debug", "release"

        //只保留指定和默认资源
        resConfigs('zh-rCN')




        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }


        defaultConfig {
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a', 'x86'
            }
        }
    }

    dataBinding{
        enabled=true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'META-INF/proguard/coroutines.pro'
        /*exclude 'META-INF/androidx.legacy_legacy-support-core-utils.version'
        exclude 'META-INF/androidx.documentfile:documentfile.version'
        exclude 'META-INF/androidx.swiperefreshlayout:swiperefreshlayout.version'
        exclude 'META-INF/androidx.print:print.version'
        exclude 'META-INF/androidx.slidingpanelayout:slidingpanelayout.version'
        exclude 'META-INF/androidx.swiperefreshlayout:swiperefreshlayout.version'
        exclude 'META-INF/androidx.asynclayoutinflater:asynclayoutinflater.version'
        exclude 'META-INF/androidx.legacy:legacy-support-core-ui.version'*/

    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }


    useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
    }


    signingConfigs {

        release {

            storePassword '123456'
            keyAlias 'fastandroid'
            keyPassword '123456'
            storeFile file('../keystore/source.keystore')
        }
    }
    buildTypes {
        release {
            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            //获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
            //安装目录下的tools/prlguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean', 'LOG_DEBUG', "false")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
        }
        debug {
            manifestPlaceholders = [appName: "FastAnd测试版"]
            buildConfigField('boolean', 'LOG_DEBUG', "true")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
        }
    }



    //将SO库打包到apk内
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


    /**
     * release构建忽略dev这一个渠道
     */
    variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('dev')) {
                    variant.setIgnore(true);
                }
            }
        }
    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "4g"

    }

}

kotlin {
    experimental {
        coroutines 'enable'
    }
}
androidExtensions {
    experimental = true
}


dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    if (!isTopicRunAlone.toBoolean()) {
        implementation project(':topic')
    }


    implementation project(':baselib')
    implementation project(':fastFramework')

    implementation project(':hencode_basic')
    implementation project(':hencoder_paint')
    implementation project(':hencoder_drawtext')
    implementation project(':hencoder_clipmatrix')
    implementation project(':doraemonkit')

    implementation rootProject.androidLib.core_ktx

    // ViewModel and LiveData
    implementation rootProject.androidLib.lifecycle_extensions
    implementation rootProject.androidLib.lifecycle_viewmodel_ktx



    //协程
    implementation rootProject.androidLib.coroutines_core
    implementation rootProject.androidLib.coroutines_android


    debugImplementation rootProject.thirdLib.leakcanary_support_fragment



    implementation rootProject.androidLib.constraintLayout

    implementation rootProject.androidLib.design
    implementation rootProject.androidLib.appcompatV7
    implementation rootProject.androidLib.cardview
    implementation rootProject.thirdLib.fastjson
    implementation rootProject.thirdLib.gson
    implementation rootProject.thirdLib.okhttp3
    implementation rootProject.thirdLib.material_dialogs


    implementation rootProject.thirdLib.glide
    implementation rootProject.thirdLib.picasso
    implementation rootProject.thirdLib.imageLoader
    implementation rootProject.thirdLib.volly


    implementation rootProject.thirdLib.okhttp3_log_interceptor


    //retrofit
    implementation rootProject.thirdLib.retrofit
    implementation rootProject.thirdLib.retrofit_converter_gson
    implementation rootProject.thirdLib.retrofit_adapter_rxjava
    implementation rootProject.thirdLib.retrofit_converter_scalars

    //rxjava&rxandroid
    implementation rootProject.thirdLib.rxjava
    implementation rootProject.thirdLib.rxandroid
    implementation 'com.permissionx.guolindev:permissionx:1.4.0'



    implementation rootProject.androidLib.multidex


    //ARouter
//    implementation rootProject.ext.thirdLib.arouter_api
//    annotationProcessor rootProject.ext.thirdLib.arouter_compiler

    //必须加行这行，否则proxyToolProcessor无法自动生成类
    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')


    implementation rootProject.thirdLib.bugly
    implementation rootProject.thirdLib.buglyNative

    implementation 'org.aspectj:aspectjrt:1.8.14'


    //Room
    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"




    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'


}

