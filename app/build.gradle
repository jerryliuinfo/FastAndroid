apply plugin: 'com.android.application'
//com.hc.gradle为resources/META-INF/gradle-plugins
//下的properties文件名称

//apply plugin: 'largeimage-monitor'

ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译


apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'



Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}


android {

    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode 100
        versionName "V1.0.0"

        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        //5.0以下将svg图片生成指定维度的图片
        vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        flavorDimensions "env"

        //只保留指定和默认资源
        resConfigs('zh-rCN')

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }
        defaultConfig {
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a', 'x86'
            }
        }
    }



    buildTypes {

        release {
            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            //获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
            //安装目录下的tools/prlguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean', 'LOG_DEBUG', "false")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
        }
        debug {
            manifestPlaceholders = [appName: "FastAnd测试版"]
            buildConfigField('boolean', 'LOG_DEBUG', "true")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
        }
    }

    productFlavors {
        dev {
            dimension "env"
            manifestPlaceholders = [HOST_VALUE: "www.baidu1.com"]
        }

        etest {
            //海外账号环境
            dimension "env"
            manifestPlaceholders = [HOST_VALUE: "www.baidu2.com"]
        }

        uat {
            dimension "env"
            manifestPlaceholders = [HOST_VALUE: "www.baidu3.com"]

        }
        prod {
            dimension "env"
            manifestPlaceholders = [HOST_VALUE: "www.baidu4.com"]

        }



    }



    signingConfigs {

        release {
            storePassword properties.getProperty('KEYSTORE_PASSWORD')
            storeFile file(properties.getProperty('KEYSTORE_FILE'))
            keyAlias properties.getProperty('KEYSTORE_ALIAS')
            keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
        }


        debug {
            storePassword properties.getProperty('KEYSTORE_PASSWORD')
            storeFile file(properties.getProperty('KEYSTORE_FILE'))
            keyAlias properties.getProperty('KEYSTORE_ALIAS')
            keyPassword properties.getProperty('KEYSTORE_ALIAS_PASSWORD')
        }
    }




    resourcePrefix ""
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def buildType = variant.buildType.name
            output.outputFileName = "${applicationId}-${versionName}-${versionCode}-${buildType}.apk"

            println("storePassword:${properties.getProperty('KEYSTORE_PASSWORD')}, keyAlias:${properties.getProperty('KEYSTORE_ALIAS') }" )
        }
    }





    buildFeatures{
        dataBinding = true
        // viewBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility rootProject.sourceCompatibilityVersion
        targetCompatibility rootProject.targetCompatibilityVersion
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }


    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/*.kotlin_module'

    }


    useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
    }


    //将SO库打包到apk内
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }







    //AspectJ 报错 参考:https://blog.csdn.net/zhangshuny/article/details/106056790,
    // https://blog.csdn.net/tian2342/article/details/102698564
//    aspectjx{
//        exclude 'androidx','com.google','com.google.firebase','com.google.android','com.android'
//    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "4g"

    }

}

kotlin {
    experimental {
        coroutines 'enable'
    }
}
androidExtensions {
    experimental = true
}


dependencies {
    api fileTree(include: ['*.jar',"*.aar"], dir: 'libs')

    println("isTopicRunAlone:${isTopicRunAlone}")


    implementation rootProject.ext.dependencies2.publicImplementation
    implementation rootProject.ext.androidLib.multidex


    implementation rootProject.ext.thirdLib.superTextView
    implementation rootProject.ext.thirdLib.banner
    implementation rootProject.ext.thirdLib.agentweb
    implementation rootProject.ext.thirdLib.picasso
    implementation rootProject.ext.thirdLib.imageLoader
    implementation rootProject.ext.thirdLib.jsbridge

    implementation rootProject.ext.thirdLib.reactivexRxjava2
    implementation rootProject.ext.thirdLib.reactivexRxandroid


    implementation rootProject.ext.androidLib.androidx_workmanager
    implementation rootProject.ext.thirdLib.blockcanary
    implementation rootProject.ext.thirdLib.leakcanary


    implementation rootProject.ext.thirdLib.retrofit
    implementation rootProject.ext.thirdLib.retrofitConverterGson
    implementation rootProject.ext.thirdLib.retrofitConverterScalars
    implementation rootProject.ext.thirdLib.retrofitAdapterRx

    implementation rootProject.ext.thirdLib.permissionx
    implementation rootProject.ext.thirdLib.viewpump

    debugImplementation rootProject.ext.thirdLib.blockcanary



    rootProject.ext.dependencies.basic.each{
        implementation project(it)
    }
    implementation project(":libnetwork")
    implementation project(':hencode_basic')
    implementation project(':hencoder_paint')
    implementation project(':hencoder_drawtext')
    implementation project(':hencoder_plus')
    implementation project(':hencoder_clipmatrix')




    //必须加行这行，否则proxyToolProcessor无法自动生成类
    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')







    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"


}


//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//variants.all { variant ->
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}


