apply plugin: 'com.android.application'
apply from: 'and_res_guard.gradle'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//hit
apply plugin: 'dagger.hilt.android.plugin'

//Navigation 传递参数插件
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'kotlin-android-extensions'

println("read Property MethodTraceMan:${readLocalProperty("MethodTraceMan")}")

//https://github.com/MichaelRocks/paranoid
apply plugin: 'io.michaelrocks.paranoid'



ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译


//插件的名字和 .properties 的文件名字保持一致
apply plugin: 'com.fastandroid.release'

releaseInfo {
    //kotlin 定义方式需要定义成 key = value 的形式， 如果 是 groovy 定义 方式写成 name   value
    versionCode = "1"
    versionName = "1.0.0"
    versionInfo = "第一个版本~"
    fileName = "releases.xml"
}


def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    println "getAppVersionName:${stdout.toString()}"
    return stdout.toString()
}

def computeVersionName(label) {
    return "2.7.${android.defaultConfig.versionCode}-${label}"
}

def getAppVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--list'
        standardOutput = stdout
    }
    println "getAppVersionCode:${stdout.toString()}"
    return stdout.toString().split('\n').size()
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH-mm-ss')
    return formattedDate
}

// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
final File PROD_PROPS_FILE = new File('prod.properties')
final File REPO_PROPS_FILE = new File('repo.properties')
final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)


android {
    compileSdkVersion AppConfig.compileSdk
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion AppConfig.minSdk
        targetSdkVersion AppConfig.targetSdk
        versionCode AppConfig.versionCode
        versionName AppConfig.versionName

        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner 'androidx.uitest.runner.AndroidJUnitRunner'
        //5.0以下将svg图片生成指定维度的图片
        vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        flavorDimensions "env"

        signingConfig signingConfigs.debug

        /**
         * 配置哪些类型的资源才被打包到apk 中，例如配置为 'zh-rCN'，则只有 中文的资源才会被打包到apk中，
         * 这样我们引用的第三方库，特别是 support library 和 google play services 这两个主要的大库，
         * 因为国际化的问题，他们都支持了几十种语言，但是对于我们的app 来说只需要中文的语言就可以了
         */
        resConfigs('zh-rCN', 'hdpi')

        resValue "string", "appDisplayName", ""


        defaultConfig {
            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a', 'x86'
            }
        }

        buildConfigField('boolean', 'LOG_DEBUG', "true")
        buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")
        buildConfigField 'String', 'WEB_URL', '"http://www.default.com"'

        /**
         * defaultConfig 下的consumerProguardFiles 配置的*.pro文件将会在library
         module打包成aar时，以proguard.txt的形式存在，将参与到集成这个arr的App编译中，但不参与这个library
         module打包成aar的编译过程；
         ————————————————
         */
        consumerProguardFiles "consumer-rules.pro"

// Consult the README on instructions for setting up Unsplash API key
        buildConfigField("String", "UNSPLASH_ACCESS_KEY", "\"" + getUnsplashAccess() + "\"")
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            setSigningConfigKey(release, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }


    productFlavors {
        mock {
            dimension "env"
            applicationIdSuffix = ".mock"
        }
        dev {
            versionName computeVersionName('dev')
            dimension "env"
//            manifestPlaceholders = [UMENG_CHANNEL: "dev"]
            resValue "string", "appDisplayName", "FastDev"
            buildConfigField 'String', 'WEB_URL', '"http://www.dev.com"'
            resValue 'string', 'channel_tips', 'dev渠道欢迎你'
        }

        prod {
            dimension "env"
            versionName computeVersionName('r')
//            manifestPlaceholders = [UMENG_CHANNEL: "prod"]
            resValue "string", "appDisplayName", "FastProd"
            buildConfigField 'String', 'WEB_URL', '"http://www.prod.com"'
            /**
             * 将会在 app/build/generated/res/resValues/prodPay/debug/values/gradleResValues.xml
             * 中生成 channel_tips 字符串
             */
            resValue 'string', 'channel_tips', 'prod渠道欢迎你'
            signingConfig signingConfigs.release
        }



    }


    buildTypes {

        release {
            debuggable true    //默认false，可不写
            minifyEnabled = true
            /**
             * 去除无用的资源
             * 开启了这个开关之后，在构建日志中会看到执行 transformClassesWithShrinkResForRelease
             */
            shrinkResources true
            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            /**
             * 获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
             * 安装目录下的tools/prlguard
             */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean', 'LOG_DEBUG', "false")
            buildConfigField('String', "BUGLY_APP_ID", "\"a397701fd5\"")

        }
        debug {
            debuggable = true
            minifyEnabled false
            shrinkResources false
            //应用包名添加.debug后缀
            applicationIdSuffix ".debug"
            //禁用PNG压缩。
            crunchPngs false
            //停用Crashlytics，以提高调试 build 的构建速度
            ext.enableCrashlytics = false

            manifestPlaceholders = [appName: "FastAnd测试版"]

        }
    }


    adbOptions {
        timeOutInMs = 5000
        //用来设置 adb install 安装这个操作的设置项的
        /**
         * -r: replace existing application
         * -t: allow uitest packages
         * -s: install application on sdcard
         * -d: allow version code downgrade
         * -g: grant all runtime permissions
         */
        installOptions '-r', '-s'
    }


    resourcePrefix ""
    //修改apk 名称
    applicationVariants.all { variant ->
        //这里的flavor 是单一维度的，例如 devPay， 返回的是两个 ， 一个是 dev 一个是pay
//        variant.productFlavors.each{ flavor ->
//            println "applicationVariants flavor:${flavor.name}"
//        }
        //outputs 属性是一个list集合，遍历找到以 .apk 结尾，说明是 apk文件
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def versionName = variant.versionName
                def buildType = variant.buildType.name
                def flavorName = variant.flavorName
                //flavorName:prodPay   fileName:app-prod-pay-debug.apk
//                println "flavorName: ${flavorName}, fileName:${output.outputFile.name}"
                output.outputFileName = "${"FastAndroid"}_${flavorName}_${versionName}_${buildType}.apk"
            }
        }
    }


    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }


    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }


    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/*.kotlin_module'

    }


    useLibrary 'org.apache.http.legacy'

    lintOptions {
        /**
         * https://blog.csdn.net/u010230055/article/details/80742626  去掉 app:lintVitalRelease 这个任务，这个任务很耗时，
         * 设置 checkReleaseBuilds false 就不会执行这个任务了
         */
        checkReleaseBuilds false
        abortOnError false
        //检查是否使用了最新api
//        check 'NewApi'
    }


    //将SO库打包到apk内
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        test {
            java.srcDirs += "src/uiTest/java"
            resources.srcDirs += 'src/uiTest/resources'
        }

    }


    //AspectJ 报错 参考:https://blog.csdn.net/zhangshuny/article/details/106056790,
    // https://blog.csdn.net/tian2342/article/details/102698564
//    aspectjx{
//        exclude 'androidx','com.google','com.google.firebase','com.google.android','com.android'
//    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }


    dexOptions {
        // 声明是否对依赖的库进行 dex 预处理来使你的增量构建更快速
        preDexLibraries true
        // 设置最大的线程数量使用当运行 dex-in-process 时,默认值是 4
        maxProcessCount 8
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}
//androidExtensions {
//    experimental = true
//}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.doFirst {
            println("=====================assembleDebug doFirst=========================")
        }
    }
}

afterEvaluate {
    println "afterEvaluate  -->"
    android.applicationVariants.all { variant ->
        def capitalized = variant.name.capitalize()
        //ProdPayDebug、ProdFreeDebug、DevPayDebug、DevFreeDebug
        if (capitalized == "ProdPayDebug") {
            def build = new StringBuilder()
            build.append("name:${variant.name}\n")
            build.append("description:${variant.description}\n")
            build.append("dirName:${variant.dirName}\n")
//            build.append("base:${variant.baseName}\\n")
            build.append("flavorName:${variant.flavorName}\\n")
            build.append("mergedFlavor:${variant.mergedFlavor}\\n")
            build.append("ProductFlavors:${variant.productFlavors}\\n")
//            build.append("SourceSets:${variant.sourceSets},")
//            build.append("SourceFolders:${variant.getSourceFolders(SourceKind.JAVA)},")
            build.append("getMappingFile:${variant.mappingFile}\\n")
            build.append("buildType:${variant.buildType}\\n")

            println build.toString()

            /**
             * https://t.zsxq.com/MfqNzbE
             * 让 customTask 在 assembleXX 之后执行
             */
            tasks.named("assemble$capitalized").get().finalizedBy "customTask"
        }

    }
}

task customTask {
    doLast {
        println "customTask doLast  -->"
    }
}

dependencies {
//    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

//    api fileTree(include: ['*.jar',"*.aar"], dir: 'libs')

    fileTree(include: ['*.jar', '*.aar'], dir: 'libs').each {
        def name = it.name
        def index = name.lastIndexOf(".")
        def fileName = name[0..<index]
        def extName = name[(index + 1)..<name.length()]
        implementation(name: fileName, ext: extName, changing: true)
        println "implementation name: ${fileName}, ext:${extName}"
    }
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    println("isTopicRunAlone:${isTopicRunAlone}")

    implementation(*Kotlin.kotlin)

    implementation AndroidX.appCompat
    implementation AndroidX.material
    implementation AndroidX.cardview
    implementation AndroidX.constraintLayout
    implementation AndroidX.core_ktx

    implementation AndroidX.activity_ktx
    implementation AndroidX.fragment_ktx
    implementation AndroidX.swiperefreshLayout
    implementation AndroidX.palette
    implementation AndroidX.preference

    implementation 'androidx.dynamicanimation:dynamicanimation-ktx:1.0.0-alpha03'


    implementation (*Libs.glide)
    implementation Libs.gson
    implementation Libs.utilcode
    implementation Libs.brvh
    implementation Libs.mmkv
    implementation Libs.qmui

    implementation(SDK.TencentBugly)
    implementation(SDK.TencentBuglyNative)

    implementation(*Libs.rxJava)
    implementation(*Libs.retrofit)


    implementation(*Jetpack.lifecycle)
    implementation(*Jetpack.navigation)
    implementation(*Jetpack.room)
    implementation(*Jetpack.hit)
    implementation(AndroidTest.espresso_idling)


    implementation(*AndroidTest.espresso)

    kapt(*Jetpack.hit_compiler)


    implementation(*Libs.coroutine)
    implementation(*Libs.immersionbar)
    implementation(*Libs.otherThirdLibs)
//    debugImplementation 'com.guolindev.glance:glance:1.1.0'


    implementation Libs.multidex

    implementation Jetpack.workManager


    implementation Libs.viewPage2


    //kotlin 用 kapt
    kapt Libs.room_compiler



    implementation project(":fastFramework")
    implementation project(":baselib")


    implementation project(":libnetwork")
    implementation project(':hencode_basic')
    implementation project(':hencoder_paint')
    implementation project(':hencoder_drawtext')
    implementation project(':hencoder_plus')
    implementation project(':hencoder_clipmatrix')
//    implementation project(':easypay')

//https://github.com/LSPosed/AndroidHiddenApiBypass
    implementation 'org.lsposed.hiddenapibypass:hiddenapibypass:4.2'
    //android 11 FreeReflection一个允许你在Android P上使用反射而没有任何限制的库
    implementation 'me.weishu:free_reflection:3.0.1'


}


sourceSets.all {
    ext.resourceDir = null
}

sourceSets {
    main {
        resourceDir = "main/res"
    }
    test {
        resourceDir = "uitest/res"
    }
}


private setSigningConfigKey(config, Properties props) {
    if (props != null) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

private static Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}

def getUnsplashAccess() {
    return project.findProperty("unsplash_access_key")
}
