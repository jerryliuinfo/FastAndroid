apply plugin: 'com.android.application'
//com.hc.gradle为resources/META-INF/gradle-plugins
//下的properties文件名称

ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译
def config = rootProject.ext
//apply from: rootProject.file('cc-settings-2.gradle')
apply plugin: 'android-aspectjx'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}


//commit次数作为版本号,因为commit只增不减
def getCommitVersionCode() {
    if (project.hasProperty("RELEASE")) {
        def cmd = "git rev-list HEAD --count"
        return cmd.execute().text.trim().toInteger()
    } else {
        return 13149
    }
}



android {

    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode 100
        versionName "V1.0.0"

        //archivesBaseName = "FastAndroid-$versionName"
        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        flavorDimensions "debug","release"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }
   

    useLibrary 'org.apache.http.legacy'

    splits {
        density {
            enable true
            reset()
        }
    }

    lintOptions {
        abortOnError false
    }


   /* signingConfigs {
        dev {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                //throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }

        prod {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                //throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }*/



    buildTypes {
        release {

//            multiDexKeepFile file('dex.keep')
//            def myFile = file('dex.keep')
//            println("isFileExists:"+myFile.exists())


            //minifyEnabled true
            //shrinkResources true
            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            //获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
            //安装目录下的tools/prlguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean','LOG_DEBUG',"false")
            buildConfigField('String',"BUGLY_APP_ID","\"a397701fd5\"")
        }
        debug {
            minifyEnabled false
            manifestPlaceholders = [appName: "FastAnd测试版"]
            //shrinkResources true
            buildConfigField('boolean','LOG_DEBUG',"true")
            buildConfigField('String',"BUGLY_APP_ID","\"a397701fd5\"")
        }

    }


    /**
     * release构建忽略dev这一个渠道
     */
    variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('dev')){
                    variant.setIgnore(true);
                }
            }
        }
    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "4g"

    }

}









dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    if (!isTopicRunAlone.toBoolean()) {
          implementation project(':topic')
        }
    debugImplementation config.thirddependencies.leakcanary_android
    releaseImplementation config.thirddependencies.leakcanary_android_no_op
    debugImplementation config.thirddependencies.leakcanary_support_fragment
    api project(':baselib')
    api config.supportDependencies.appcompatV7
    //api config.thirddependencies.bugly
    api config.supportDependencies.multidex
    implementation config.thirddependencies.butterknife
    annotationProcessor config.thirddependencies.butterknife_compiler
    //ARouter
    api config.thirddependencies.arouter_api
    annotationProcessor config.thirddependencies.arouter_compiler
    //必须加行这行，否则proxyToolProcessor无法自动生成类
    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')
    //implementation 'com.google.android:flexbox:0.3.0'
//    implementation 'com.github.markzhai:blockcanary-android:1.5.0'


}

