apply plugin: 'com.android.application'
//com.hc.gradle为resources/META-INF/gradle-plugins
//下的properties文件名称

ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译
def config = rootProject.ext
apply plugin: 'android-aspectjx'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }
}






android {

    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        applicationId "com.apache.fastandroid"
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode 100
        versionName "V1.0.0"

        //archivesBaseName = "FastAndroid-$versionName"
        //dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //5.0以下将svg图片生成指定维度的图片
        vectorDrawables.generatedDensities('xhdpi','xxhdpi')

        //5.0以上
        //vectorDrawables.useSupoortLibrary = true

        flavorDimensions "debug","release"

        //只保留指定和默认资源
        resConfigs('zh-rCN')

        //配置so库架构(arm真机,x86模拟器)
//        ndk{
//            abiFilter('armeabi')
//        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }

//        manifestPlaceholders = [
//                JPUSH_PKGNAME : applicationId,
//                JPUSH_APPKEY : "你的 Appkey ", //JPush 上注册的包名对应的 Appkey.
//                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
//        ]

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/proguard/okhttp3.pro'
        exclude 'META-INF/proguard/coroutines.pro'

    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }
   

    useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
    }






    buildTypes {
        release {


            //zipAlignEnabled能提供系统和应用的运行效率
            zipAlignEnabled true
            //获取Android SDK安装目录中，Android为我们提供的默认的Proguard混淆配置文件，路径是android sdk
            //安装目录下的tools/prlguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "FastAnd"]

            buildConfigField('boolean','LOG_DEBUG',"false")
            buildConfigField('String',"BUGLY_APP_ID","\"a397701fd5\"")
        }
        debug {
            manifestPlaceholders = [appName: "FastAnd测试版"]
            buildConfigField('boolean','LOG_DEBUG',"true")
            buildConfigField('String',"BUGLY_APP_ID","\"a397701fd5\"")
        }

    }

    //将SO库打包到apk内
    sourceSets{
        main{
            jniLibs.srcDirs = ['libs']
        }
    }


    /**
     * release构建忽略dev这一个渠道
     */
    variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('dev')){
                    variant.setIgnore(true);
                }
            }
        }
    }


    //gradle 打包 add end
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "4g"

    }

}

kotlin{
    experimental {
        coroutines 'enable'
    }
}







dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    if (!isTopicRunAlone.toBoolean()) {
          implementation project(':topic')
        }
    debugImplementation config.thirddependencies.leakcanary_support_fragment
    implementation project(':baselib')
    implementation config.supportDependencies.appcompatV7
    implementation config.supportDependencies.multidex
    implementation config.thirddependencies.butterknife
    annotationProcessor config.thirddependencies.butterknife_compiler
    //ARouter
    implementation config.thirddependencies.arouter_api
    annotationProcessor config.thirddependencies.arouter_compiler
    //必须加行这行，否则proxyToolProcessor无法自动生成类
    implementation project(':artemis_annotation')
    annotationProcessor project(':artemis_compiler')


    implementation config.thirddependencies.bugly
    implementation config.thirddependencies.buglyNative

    implementation 'org.aspectj:aspectjrt:1.8.14'

    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'

//    //协程
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5'
//
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"//主要是这两个依赖





}

