//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main

//def config = rootProject.ext
apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
apply from: "../maven-publish2.gradle"

android {
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //                arguments = [moduleName: project.getName()]
            }
        }

        /**
         * defaultConfig 下的consumerProguardFiles 配置的*.pro文件将会在library
         module打包成aar时，以proguard.txt的形式存在，将参与到集成这个arr的App编译中，但不参与这个library
         module打包成aar的编译过程；
         consumerProguardFiles 会被 主App模块 作为混淆文件使用导入，而 proguardFiles 则不会。
         这个属性只作用于我们创建的 library 中
         ————————————————
         */
        consumerProguardFiles "consumer-rules.pro"
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures{
        dataBinding = true
        // for view binding :
         viewBinding = true
    }

//    dataBinding {
//        enabled = true
//    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            /**
             * buildType下proguardFiles配置的*.pro文件作用与library
             module打包成aar的编译过程，仅作用于本module的编译混淆过程。
             */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation rootProject.ext.dependencies2.publicImplementation

}



tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

