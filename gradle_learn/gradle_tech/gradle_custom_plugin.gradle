

/*
class MyFirstPlugin implements Plugin<Project>{


    @Override
    void apply(org.gradle.api.Project target) {
        MyFirstPluginBean pluginBean = project.extensions.create("artemis",MyFirstPluginBean.class)
        project.afterEvaluate {
            println "name:${pluginBean.name}, age:${pluginBean.age}"
        }
    }
}*/

task CustomTask{
    doFirst {
        println "CustomTask doFirst"
    }
}

task sortList{
    def list = [1,3,2,5,4]
    println ("sortList before:${list}")

    list.sort(new Comparator<Integer>() {
        @Override
        int compare(Integer t1, Integer t2) {
            if (t1 > t2){
                return 1;
            }else if (t1 < t2){
                return -1
            }
            return 0
        }
    })
    println ("sortList after:${list}")

    list.remove(1)
    println ("sortList remove:${list}")

    def findList = list.find {
        it % 2 == 0
    }
    println ("sortList findList:${findList}")

    println ("sortList:${list.min()} max:${list.max()}}")

    def countNum = list.count {
        it > 3
    }
    println ("sortList countNum:${countNum}")

}


task testMap {
    def map = new HashMap<String,String>()
    map.put("key1", "value1")
    map.put("key2", "value2")

    println ("testMap v1: ${map['key1']}")

    map.each { key,value ->
        println ("testMap each key: ${key},value: ${value}")
    }

    map.eachWithIndex { Map.Entry<String, String> entry, int i ->
        println ("testMap eachWithIndex key: ${entry.key},value: ${entry.value}, index:${i}")
    }

    def findAllResult = map.findAll {
        return it.value .contains("2")
    }
    println ("testMap findAllResult: ${findAllResult}")


}

task testFile(){

   /* File file = new File('./version.properties')

    def text = file.getText()
    def text2 = file.readLines()
    println "testFile path :${file.path},text:${text}, text2:${text2}"

    file.eachLine { oneLine, lineNo ->
        println "${lineNo} ${oneLine}"
    }*/
}
apply plugin: PluginDemo

class PluginDemo implements Plugin<Project>{

    @Override
    void apply(Project target) {
        def extensions = target.extensions.create("plugin",PluginExtension)
        target.afterEvaluate {
            println "Hello PluginDemo:${extensions.name} --->"
        }
    }
}

plugin{
    name = "name in plugin " //其实是 name ( "name in plugin ") ，最终是采用 setName("name in plugin")
}

class PluginExtension{
    def name = "name in PluginExtension2"
}

